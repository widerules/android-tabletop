#summary Structure of database

This is an init file for sqlite db, used for storing game on disk. 

{{{
BEGIN;
}}}

{{{
CREATE TABLE links (_id INTEGER PRIMARY KEY, sup INTEGER, sub INTEGER);

CREATE TABLE notes (_id INTEGER PRIMARY KEY, value STRING);
}}}

Two only "real" tables.

{{{
CREATE INDEX links_sup on links (sup);

CREATE INDEX links_sub on links (sub);

CREATE UNIQUE INDEX [links_sub_sup] ON [links](
[sup]  ASC,
[sub]  ASC
);

CREATE INDEX notes_value on notes (value);

CREATE INDEX notes_id on notes (_id);
}}}

All fields are used for indexing.

{{{
CREATE VIEW subs AS SELECT sub, value, sup FROM notes INNER JOIN links ON sub=notes._id;
}}}

View of notes, that are linked from a specific note.

{{{
CREATE VIEW names AS SELECT subs.sub AS name_id, subs.value AS name FROM subs WHERE sup=-2;
}}}
Notes that are names of other notes.

{{{
CREATE VIEW [sub_subs] AS 
SELECT DISTINCT sub_sub.sub AS sub, sub_sub.sup AS sup, sup_sub.sup AS sup_sup
FROM subs as sub_sub INNER JOIN subs AS sup_sub ON sup_sub.sub = sub_sub.sup;
}}}
Triplets of sequently linked notes: sub <- sup <- sup_sup.
That is used usually to query notes, that are childs of notes of specific type (so, sup_sup is usually some special negative number)

{{{
CREATE VIEW [named] AS
SELECT subs.sub AS named_id, names.name as name, subs.value as value FROM subs INNER JOIN names WHERE name_id = sup;
}}}
Notes that has names (names included).

{{{
CREATE VIEW [accessories] AS 
SELECT subs.sub AS acc_id, subs.value AS acc_name, sub_subs.sup AS sup_id FROM subs
LEFT OUTER JOIN sub_subs on sub_subs.sub = subs.sub AND sub_subs.sup_sup = -7
WHERE subs.sup = -7;
}}}
View of accessories, together with id of it's parent, if present.

{{{
CREATE VIEW [attributes] AS 
SELECT named_id AS attr_id, name AS attr_name, named.value AS attr_value, sub_subs.sup AS acc_id FROM named
INNER JOIN links ON links.sub = named_id AND links.sup = -6
INNER JOIN sub_subs ON sub_subs.sub = named_id AND sub_subs.sup_sup = -7;
}}}
View of attributes, with id of accessory they belong, names and values.
Next-to last line means just "has type attribute", and last - "linked from note of type accessory"

{{{
CREATE TRIGGER [insert_named]
INSTEAD OF INSERT ON [named]
FOR EACH ROW
BEGIN

INSERT INTO names (name) SELECT new.name AS name;  

INSERT OR REPLACE INTO notes
VALUES((SELECT named_id FROM named WHERE name = new.name), new.value);   

INSERT OR IGNORE INTO links (sup, sub) VALUES (
(SELECT name_id FROM names WHERE name = new.name), last_insert_rowid());   

END;
}}}

Trigger to for adding new notes with names.

{{{
CREATE TRIGGER [insert_names]
INSTEAD OF INSERT ON [names]
FOR EACH ROW
BEGIN

INSERT INTO notes (value) SELECT new.name AS value
WHERE (SELECT COUNT(*) FROM names where name=new.name) = 0; 

INSERT OR IGNORE INTO links (sup, sub) SELECT -2 AS sup, last_insert_rowid() AS sub; 

END;
}}}

Triggers for adding new names.

Those triggers works, but not necessary - usually "direct" inserts into tables are used.

{{{
INSERT INTO notes VALUES (100000000000, "");
}}}

Ids for notes are usually generated by players. They should not conflict. As a rule, game creator use ids starting from 1, second player - starting from 1 000 000 000, third - from 2 000 000 000, etc. Autoincremented ids, generated by db should be used only for notes, not visible to other players. Therefore, a fake note with a big id is inserted.

{{{
END;
}}}

Actually, it misses also triggers that remove links to and from removed note and attributes of removed accessory. I'll add them shortly.